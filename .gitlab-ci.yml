stages:
    - test
    - release
    - deploy

variables:
    CHART_PATH: ./helm
    # NAMESPACES
    STAGE_NAMESPACE: tiller-world
    PROD_NAMESPACE: tiller-world
    # RELEASE NAMES
    STAGE_RELEASE_NAME: scraping-stage
    PROD_RELEASE_NAME: scraping-prod

test:
    image: node:8-alpine
    stage: test
    services:
        - name: registry.gitlab.com/openseen/discovery/node.js:latest
          alias: discovery-test
    variables:
        DISCOVERY_HOST: "discovery-test"
        DISCOVERY_PORT: "7007"
    script:
        - apk add --no-cache make gcc g++ python
        - npm config set //npm.api.haus/:_authToken ${NPM_TOKEN}
        - yarn install
        - yarn test
    only:
        - dev

image_release:
    image: docker:stable
    stage: release
    services:
        - docker:dind
    script:
        - echo "${MONGODB_SSL_CA}" > ./mongodb_ca.crt
        - echo "${MONGODB_SSL_KEY}" > ./mongodb_cert.key
        - echo "${MONGODB_SSL_CERT}" > ./mongodb_cert.crt
        - docker info
        - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
        - docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t "${CI_REGISTRY_IMAGE}:latest" .
        - docker tag "${CI_REGISTRY_IMAGE}:latest" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
        - docker push "${CI_REGISTRY_IMAGE}:latest"
        - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"

# deploy to staging environment
deploy_staging:
    stage: deploy
    image: lwolf/helm-kubectl-docker:latest
    before_script:
        - kubectl config set-cluster kubernetes --server="$KUBE_URL" --insecure-skip-tls-verify=true
        - kubectl config set-credentials kubernetes-admin --token="$KUBE_TOKEN"
        - kubectl config set-context default --cluster=kubernetes --user=kubernetes-admin
        - kubectl config use-context default
        - helm init --client-only
    script:
        - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry --namespace=${STAGE_NAMESPACE} gitlab-registry --docker-server=${CI_REGISTRY} --docker-username=${CI_DEPLOY_USER} --docker-password=${CI_DEPLOY_PASSWORD} --docker-email=${GITLAB_USER_EMAIL} -o yaml --dry-run)" | kubectl apply -f -'
        - helm delete --tiller-namespace=${STAGE_NAMESPACE} --purge ${STAGE_RELEASE_NAME} || true
        - helm upgrade --install
           --tiller-namespace=${STAGE_NAMESPACE}
          --set image.tag=${CI_COMMIT_SHA}
          --set image.repository=${CI_REGISTRY_IMAGE}
          --set service.port=${API_PORT}
          --set discoveryHost=${DISCOVERY_HOST}
          --set discoveryPort=${DISCOVERY_PORT}
          --namespace=${STAGE_NAMESPACE}
          ${STAGE_RELEASE_NAME} ${CHART_PATH}
    environment:
        name: staging
    only:
        - master

# deploy to production environment (manual)
deploy_prod:
    stage: deploy
    image: lwolf/helm-kubectl-docker:latest
    before_script:
        - kubectl config set-cluster kubernetes --server="$KUBE_URL" --insecure-skip-tls-verify=true
        - kubectl config set-credentials kubernetes-admin --token="$KUBE_TOKEN"
        - kubectl config set-context default --cluster=kubernetes --user=kubernetes-admin
        - kubectl config use-context default
        - helm init --client-only
    script:
        - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry --namespace=${PROD_NAMESPACE} gitlab-registry --docker-server=${CI_REGISTRY} --docker-username=${CI_DEPLOY_USER} --docker-password=${CI_DEPLOY_PASSWORD} --docker-email=${GITLAB_USER_EMAIL} -o yaml --dry-run)" | kubectl apply -f -'
        - helm upgrade --install
          --tiller-namespace=${PROD_NAMESPACE}
          --set image.tag=${CI_COMMIT_SHA}
          --set image.repository=${CI_REGISTRY_IMAGE}
          --set service.port=${API_PORT}
          --set discoveryHost=${DISCOVERY_HOST}
          --set discoveryPort=${DISCOVERY_PORT}
          --namespace=${PROD_NAMESPACE}
          ${PROD_RELEASE_NAME} ${CHART_PATH}
    environment:
        name: production
    when: manual
    only:
        - master
